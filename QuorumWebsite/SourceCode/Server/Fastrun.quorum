package Libraries.Database.Server
use Libraries.Network.NetworkExchange
use Libraries.Containers.HashTable
use Libraries.Containers.List
use Libraries.System.DateTime
use Libraries.Data.Database.Connection
use Libraries.Data.Database.Database
use Libraries.Containers.Array
use Libraries.Data.Database.QueryResult
use Libraries.Data.Database.Update
use Libraries.Network.NetworkRequest
use Libraries.Network.NetworkConnection
use Libraries.Network.NetworkRequestListener
use Libraries.Network.NetworkResponseEvent
use Libraries.Data.Database.Insert
use Libraries.Data.Database.QueryResult
use Libraries.System.Properties
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Data.Database.Find
use Libraries.Data.Database.QueryMetaData
use Libraries.Data.Database.DatabaseMetaData
use Libraries.Containers.Iterator
use Libraries.Data.Database.DatabaseTable
use Libraries.Data.Database.DatabaseColumn
use Libraries.Containers.Iterator

class Fastrun is ResponsePage, NetworkRequestListener

    constant text COMPILER_VERSION = "12.5.0"
    constant text CONTENT_TYPE = "Content-Type"
    constant text TEXT_PLAIN = "text/plain"

    NetworkExchange returnExchange
    Redis redis
    text codeToSave = ""
    text codeHash = ""

    boolean build = false
    text timezone = undefined
    text ip = ""
    text url = undefined
    text ideName = undefined
    text uuid = undefined
    text timestamp = undefined
    text experiment_key = undefined
    action ResponseReceived(NetworkExchange exchange)
        output "RESPONSE RECEIVED - exchange"
        text response = ""
        text dq = response:GetDoubleQuote()
        SharedConnection con
        HashTable<text,text> params = exchange:GetParameters()
        HashTable<text, List<text>> headers

        me:returnExchange = exchange
        List<text> list
        list:Add(TEXT_PLAIN+"; charset=UTF-8")
        headers:Add(CONTENT_TYPE, list)
        returnExchange:SetResponseHeaders(headers)
        // code if for compiler
        text code = ""
        // rest is for database submission
        build = false
        timezone = ""
        ip = exchange:GetHost()
        url = ""
        ideName = ""

        if params:HasKey("code")
            code = params:GetValue("code")
        end
        if params:HasKey("build_only")
            build = (params:GetValue("build_only") = "1")
        end
        if params:HasKey("timezone")
            timezone = params:GetValue("timezone")
        end
        if params:HasKey("pageURL")
            url = params:GetValue("pageURL")
        end
        if params:HasKey("ideName")
            ideName = params:GetValue("ideName")
        end
        if params:HasKey("uuid")
            uuid = params:GetValue("uuid")
        end
        if params:HasKey("timestamp")
            timestamp = params:GetValue("timestamp")
        end
        if params:HasKey("experiment_key")
            experiment_key = params:GetValue("experiment_key")
        end
		codeToSave = code
        
		HashTable<text, text> data
        data:Add("code", codeToSave)
        
        integer count = 0
		boolean break = true
		codeHashKey = code
        
		repeat while break
            text key = "extraBuildFile" + count
            if params:HasKey(key)
                text extraBuildFileValue = params:GetValue(key)
                data:Add(key, extraBuildFileValue)
                codeHashKey = codeHashKey + extraBuildFileValue
                count = count + 1
            else
                break = false
            end
        end


        redis:Connect("redis")
        codeHash = exchange:HashString("SHA-1", codeHashKey)
        output "IS IT ALREADY HASHED?"
        output codeHash
		
        if redis:Exists(codeHash)
            output "NOPE, HASH IT"
            response = redis:Get(codeHash)
            returnExchange:SendResponseHeaders(200, response)
            returnExchange:SendResponse(response)
            // save to database
            SaveRunFile(COMPILER_VERSION, codeToSave, build, timezone, ip, url, ideName, uuid, timestamp, experiment_key)
            
            return now
        end

        NetworkRequest request
        request:SetRequestTypeToGet()
        // timeout compile after 10 seconds
        request:SetReadTimeout(10000)
        request:SetWebAddress("http://quorum_server:1269")

        request:SetParameters(data)

        NetworkConnection http
        http:AddListener(me)

        check
            http:SendRequest(request)
        detect e
            output "Compiler Request Failed"
            output "Code"
            output code
                Failure(returnExchange, "Failed to connect")
            return now
        end

        // do not send response here wait for compiler to come back

    end


    action ResponseReceived(NetworkResponseEvent requestResponse)
        output "RESPONSE RECEIVED - request response"
        text response = requestResponse:GetResponseText()
        returnExchange:SendResponseHeaders(200, response)
        returnExchange:SendResponse(response)
        // user got the compiler response so now save to redis
        redis:Set(codeHash, response)

        // save to database
        SaveRunFile(COMPILER_VERSION, codeToSave, build, timezone, ip, url, ideName, uuid, timestamp, experiment_key)

    end

    action SaveRunFile(text version, text code, boolean build, text timezone, text ip, text url, text ide, text uuid, text timestamp, text experiment_key)
        output "SAVERUNFILE"
        SharedConnection con
        Connection connect = con:GetConnection()
        Database db
        db:Connect(connect)

        Insert runCodeInsert
        runCodeInsert:SetTable("run_code")
        runCodeInsert:Add("quorum_version",version)
        runCodeInsert:Add("build_only",build)
        Properties prop
        text hashedIP = prop:GetEnvironmentVariable("ADDRESS_SALT") + ip
        NetworkExchange exchange
        hashedIP = exchange:HashString("MD5", hashedIP)
        runCodeInsert:Add("address", hashedIP)
        runCodeInsert:Add("timezone",timezone)
        runCodeInsert:Add("pageURL",url)
        runCodeInsert:Add("ide_name",ide)
        db:Insert(runCodeInsert)

        integer lastID = db:GetLastInsertedID()
        text fileHash = exchange:HashString("SHA-1", code)

        Insert compiledFilesInsert
        compiledFilesInsert:SetTable("compiled_files")
        compiledFilesInsert:Add("id",lastID)
        compiledFilesInsert:Add("hash",fileHash)
        db:Insert(compiledFilesInsert)

        Insert filesInsert
        filesInsert:SetTable("files")
        filesInsert:SetIgnore(true)
        filesInsert:Add("hash",fileHash)
        filesInsert:Add("code",code)
        db:Insert(filesInsert)
        
        //Get ID for UUID
        Find findLoggingUserID
        findLoggingUserID:SetTable("logging_user")
        findLoggingUserID:AddColumn("id")
        findLoggingUserID:AddColumn("uuid")
        QueryResult results = db:Find(findLoggingUserID)
        integer id = -1
        repeat while results:HasNext() and id = -1
            results:Next()
            if results:GetText("uuid") = uuid
                id =results:GetInteger("id")
            end
        end

        if id not= -1 and timestamp not= undefined
            Insert logCompileEvent
            logCompileEvent:SetTable("logging_events")
            logCompileEvent:Add("user_id",id)
            logCompileEvent:Add("event_type","compile")
            logCompileEvent:Add("client_timestamp",timestamp)
            logCompileEvent:Add("page_url",url)
            JavaScriptObjectNotation json
            json:Add("hash",fileHash)
            logCompileEvent:Add("extra_data",json:ToText())
            db:Insert(logCompileEvent)
        end
        
    end

    action GetPath returns text
        return "/Fastrun.quorum"
    end
end