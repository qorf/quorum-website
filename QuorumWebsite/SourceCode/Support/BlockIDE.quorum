use Libraries.Web.Page.Division
use Libraries.Web.Page.Button
use Libraries.Web.Page.Script
use Libraries.Web.Page.Heading
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.Span


class BlockIDE is Division
    
    boolean noCanvasMode = false
    Lesson currentPage
    text paletteFile = ""
    text codeForIDE = ""
    //by default, now fill the division, but allow it to turn off
boolean fillDivision = false

    action Setup(Lesson lesson)
        Add(CreateHelpModal())
        me:currentPage = lesson
        
if fillDivision
SetClassAttribute("relative grow flex flex-col w-full mt-4 shadow-md border-2 border-quorum-blue-50 border-solid rounded-lg border-opacity-50")
        else
SetClassAttribute("relative grow flex flex-col mt-4 shadow-md border-2 border-quorum-blue-50 border-solid rounded-lg border-opacity-50")
        end
        SetIdentifier("BlockEditor")
        Division editorHeaderDiv
        editorHeaderDiv:SetClassAttribute(
"relative flex flex-row justify-between items-center min-h-fit p-1 rounded-tl-lg rounded-tr-lg border-b-2 border-quorum-blue-50 bg-quorum-blue-10"
)
        Division titleDiv
        titleDiv:SetClassAttribute("flex flex-row gap-x-2.5 items-center")
        File quorumIcon
        quorumIcon:SetPath("icons/quorumIcon.svg")
        titleDiv:AddText(quorumIcon:Read())
        
        Heading ideTitle = titleDiv:AddHeading("Blocks", 1)
        ideTitle:AddClassAttribute("text-2xl font-bold")
        editorHeaderDiv:Add(titleDiv)
        
        Division buttonDiv
        buttonDiv:SetClassAttribute("flex grow flex-wrap justify-end items-center mr-5 gap-x-2.5")
        
        text toolbarButtonStyle = "flex flex-col items-center w-auto p-1 text-xs rounded-2xl hover:bg-quorum-blue-25 hover:shadow-md hover:shadow-accent-hover active:bg-quorum-blue-50 focus:bg-quorum-blue-25"
        
Button hidePaletteButton
hidePaletteButton:SetClassAttribute(toolbarButtonStyle)
hidePaletteButton:AddAttribute("aria-label", "Hide Tray")
        File eyeIcon
        eyeIcon:SetPath("icons/eyeIcon.svg")
        hidePaletteButton:AddText(eyeIcon:Read())
        Division hidePaletteDiv
        hidePaletteDiv:SetIdentifier("HidePaletteContainer")
        hidePaletteDiv:AddClassAttribute("text-center mt-1")
hidePaletteDiv:SetStyle("text-wrap: nowrap;")
        hidePaletteDiv:AddText("Hide Tray")
        hidePaletteButton:AddNestedTag(hidePaletteDiv)
hidePaletteButton:SetOnClick("blockEditorTogglePalette()")
        
        Button zoomInButton
zoomInButton:SetClassAttribute(toolbarButtonStyle)
zoomInButton:AddAttribute("aria-label", "Zoom In")
        File zoomInIcon
        zoomInIcon:SetPath("icons/zoomIn.svg")
        zoomInButton:AddText(zoomInIcon:Read())
        Division zoomInDiv
        zoomInDiv:AddClassAttribute("text-center mt-1")
zoomInDiv:SetStyle("text-wrap: nowrap;")
        zoomInDiv:AddText("Zoom In")
        zoomInButton:AddNestedTag(zoomInDiv)
zoomInButton:SetOnClick("blockEditorZoomIn()")
        
Button zoomOutButton
zoomOutButton:SetClassAttribute(toolbarButtonStyle)
zoomOutButton:AddAttribute("aria-label", "Zoom Out")
        File zoomOutIcon
        zoomOutIcon:SetPath("icons/zoomOut.svg")
        zoomOutButton:AddText(zoomOutIcon:Read())
        Division zoomOutDiv
        zoomOutDiv:AddClassAttribute("text-center mt-1")
        zoomOutDiv:SetStyle("text-wrap: nowrap;")
        zoomOutDiv:AddText("Zoom Out")
        zoomOutButton:AddNestedTag(zoomOutDiv)
        zoomOutButton:SetOnClick("blockEditorZoomOut()")
        
        Button helpButton
        helpButton:SetIdentifier("blockHelpButton")
        helpButton:SetClassAttribute(toolbarButtonStyle)
helpButton:AddAttribute("aria-label", "Hotkeys")
        File helpIcon
        helpIcon:SetPath("icons/helpIcon.svg")
        helpButton:AddText(helpIcon:Read())
        Division helpDiv
        helpDiv:AddClassAttribute("text-center mt-1")
        helpDiv:AddText("Hotkeys")
        helpButton:AddNestedTag(helpDiv)
        helpButton:SetOnClick("showBlockHelpModal()")
        
        
Button fullscreenButton
        fullscreenButton:SetIdentifier("blockEditorFullscreenButton")
        fullscreenButton:SetClassAttribute(toolbarButtonStyle)
        fullscreenButton:AddAttribute("aria-label", "Fullscreen")
        File fullscreenIcon
        fullscreenIcon:SetPath("icons/fullscreenIcon.svg")
        fullscreenButton:AddText(fullscreenIcon:Read())
        File minimizeIcon
        minimizeIcon:SetPath("icons/minimizeIcon.svg")
        fullscreenButton:AddText(minimizeIcon:Read())
Division fullscreenDiv
fullscreenDiv:SetIdentifier("blockFullscreenLabel")
        fullscreenDiv:AddClassAttribute("text-center mt-1")
fullscreenDiv:SetStyle("text-wrap: nowrap;")
        fullscreenDiv:AddText("Fullscreen")
        fullscreenButton:AddNestedTag(fullscreenDiv)
        fullscreenButton:SetOnClick("blockEditorFullscreen()")
        
        Button runButton
        runButton:SetIdentifier("blockRunButton")
        runButton:SetClassAttribute("bg-quorum-blue-50 group disabled:bg-neutral-grey-50 disabled:text-neutral-white rounded-2xl px-4 py-2 w-fit h-6 text-xs font-semibold flex items-center justify-center")
runButton:AddAttribute("aria-label", "Run Program")
File runIcon
        runIcon:SetPath("icons/runIcon.svg")
File spinnerIcon
        spinnerIcon:SetPath("icons/spinner.svg")
        runButton:AddText(runIcon:Read())
        runButton:AddText(spinnerIcon:Read())
        runButton:AddText(" &nbsp;Run")
        runButton:SetOnClick("blockEditorRunCode('QuorumUIOutput','QuorumUIContainer')")
Button stopButton
        stopButton:SetIdentifier("blockStopButton")
        stopButton:SetClassAttribute("bg-secondary-red-100 disabled:bg-neutral-grey-50 rounded-2xl text-neutral-white px-4 py-2 w-fit h-6 text-xs font-semibold flex items-center justify-center")
stopButton:AddAttribute("aria-label", "Stop Program")
        File stopIcon
        stopIcon:SetPath("icons/stopIcon.svg")
        stopButton:AddText(stopIcon:Read())
stopButton:AddText(" &nbsp;Stop")
        stopButton:SetOnClick("window.BLOCK_EDITOR.BlockEditorStop()")
        stopButton:SetDisabled(true)
        
        
        buttonDiv:Add(hidePaletteButton)
        buttonDiv:Add(zoomInButton)
buttonDiv:Add(zoomOutButton)
        buttonDiv:Add(helpButton)
        buttonDiv:Add(fullscreenButton)
        buttonDiv:Add(runButton)
        buttonDiv:Add(stopButton)
        editorHeaderDiv:Add(buttonDiv)
        Add(editorHeaderDiv)
        
        Division outerEditorDiv
        outerEditorDiv:SetClassAttribute("flex grow min-h-128 divide-x")
        outerEditorDiv:SetStyle("touch-action: none;")
        
        Division editorDiv
        editorDiv:SetIdentifier("BlockUIContainer")
        if paletteFile not= ""
            editorDiv:AddAttribute("data-palette-for-ide", paletteFile)
        end
        if codeForIDE not= ""
            editorDiv:AddAttribute("data-code-for-ide", codeForIDE)
        end
            editorDiv:SetClassAttribute("grow relative")
outerEditorDiv:Add(editorDiv)
        
        if not noCanvasMode
Division canvasDiv
        canvasDiv:SetClassAttribute("empty:hidden w-full relative overflow-hidden")
        canvasDiv:SetIdentifier("QuorumUIContainer")
        outerEditorDiv:Add(canvasDiv)
        end
        
        Add(outerEditorDiv)
        
        Division consoleOutput
        consoleOutput:SetIdentifier("QuorumUIOutput")
        consoleOutput:AddAttribute("role", "log")
        consoleOutput:AddAttribute("aria-label", "Console Output")
        consoleOutput:SetTabIndex("0")
        consoleOutput:SetClassAttribute("h-24 p-2 overflow-auto bg-neutral-grey-10 text-base font-mono whitespace-pre-wrap border-t-2 border-quorum-blue-50")
        Add(consoleOutput)
        
        AddScripts()
    end
    
    action CreateHelpModal returns Division
        Division centerHelpModal
        centerHelpModal:AddClassAttribute("flex justify-center")
        Division helpModal
        helpModal:SetIdentifier("blockHelpModal")
        helpModal:AddAttribute("aria-modal", "true")
helpModal:AddAttribute("aria-roledescription", "dialog")
helpModal:AddAttribute("aria-hidden", "true")
        helpModal:SetClassAttribute("hidden absolute bg-neutral-grey-10 z-10 w-auto h-auto rounded-md shadow-md overflow-y-auto p-5")
        helpModal:SetStyle("max-height: calc(-100px + 100vh);")
        Division helpModalContent
        helpModalContent:SetIdentifier("blockHelpModalContent")
        helpModalContent:SetClassAttribute("flex flex-col justify-center bg-transparent p-0 m-0 w-full h-full overflow-auto")
        helpModalContent:SetTabIndex("0")
        centerHelpModal:Add(helpModal)
        
        text headerStyle = "text-2xl self-start mb-2.5 font-bold p-0"
        text paragraphStyle = "text-base self-start m-0 p-0"
        
        Button helpCloseButton
        helpCloseButton:SetTabIndex("0")
        helpCloseButton:SetClassAttribute("absolute top-5 right-5 bg-transparent p-0 m-0")
        helpCloseButton:AddText("X")
        helpCloseButton:SetOnClick("hideBlockHelpModal()")
        //Division helpModalSection1
        //Heading heading1 = helpModalSection1:AddHeading("What Is Quorum", 2)
        //heading1:SetClassAttribute(headerStyle)
        //Paragraph para1 = helpModalSection1:AddParagraph("The Quorum Programming Language is an evidence-based language that simplifies syntax and provide accessibility for blind or visually-impaired students.")
        //para1:SetClassAttribute(paragraphStyle)
        
//Division helpModalSection2
        //Heading heading2 = helpModalSection2:AddHeading("How to use Blocks",2)
        //heading2:SetClassAttribute(headerStyle)
        //Paragraph para2 = helpModalSection2:AddParagraph("The Quorum Block Editor is a built in editor and compiler. We can type code on the text editor section, found on the right side of the code editor (CTRL + 2). Block also come with a palette to help fill out code found on the left side (CTRL + 1) We are also shown output, found either in the console or a canvas will appear over the blocks. To run our code, we can press the run button found within the top of the code editor or use our keyboard shortcut.")
        //para2:SetClassAttribute(paragraphStyle)
        
Division helpModalSection3
        Heading heading3 = helpModalSection3:AddHeading("Hotkey Shortcuts")
        heading3:SetClassAttribute(headerStyle)
        heading3:SetIdentifier("blockHotkeyTitle")
        UnorderedList hotkeyList
hotkeyList:AddListItem("Move Blocks" + GetHotkeySpan("UP") + " or " +GetHotkeySpan("DOWN") + " or " + GetHotkeySpan("TAB")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Run Program " + GetHotkeySpan("ALT", "OSSpecific") + " + " +GetHotkeySpan("SHIFT") + " + " + GetHotkeySpan("R")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Stop Program " + GetHotkeySpan("ALT", "OSSpecific") + " + " +GetHotkeySpan("SHIFT") + " + " + GetHotkeySpan("S")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Hide Tray " + GetHotkeySpan("ALT", "OSSpecific") + " + " +GetHotkeySpan("SHIFT") + " + " + GetHotkeySpan("X")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Zoom In " + GetHotkeySpan("ALT", "OSSpecific") + " + " + GetHotkeySpan("+")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Zoom Out " + GetHotkeySpan("ALT", "OSSpecific")+ " + " + GetHotkeySpan("-")):SetClassAttribute("mb-2.5")
hotkeyList:AddListItem("Open Help " + GetHotkeySpan("ALT", "OSSpecific")+ " + " +GetHotkeySpan("SHIFT") + " + " + GetHotkeySpan("H")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Navigate to Tray " + GetHotkeySpan("ALT", "OSSpecific")+ " + " + GetHotkeySpan("1")):SetClassAttribute("mb-2.5")
hotkeyList:AddListItem("Navigate to Blocks " + GetHotkeySpan("ALT", "OSSpecific")+ " + " + GetHotkeySpan("2")):SetClassAttribute("mb-2.5")
hotkeyList:AddListItem("Enter Navigation Mode " + GetHotkeySpan("SHIFT")+ " + " + GetHotkeySpan("ENTER")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Switch to Next Tab " + GetHotkeySpan("CTRL")+ " + "  + GetHotkeySpan("Tab", "tabkeyNext")):SetClassAttribute("mb-2.5")
        hotkeyList:AddListItem("Switch to Previous Tab" + GetHotkeySpan("CTRL")+ " + " + GetHotkeySpan("Shift + Tab", "tabkeyPrevious")):SetClassAttribute("mb-2.5")
        helpModalSection3:Add(hotkeyList)
        
        helpModal:Add(helpModalContent)
        helpModalContent:Add(helpCloseButton)
        //helpModalContent:Add(helpModalSection1)
//helpModalContent:Add(helpModalSection2)
helpModalContent:Add(helpModalSection3)
        return centerHelpModal
    end
    
    action GetHotkeySpan(text keyName) returns text
        return GetHotkeySpan(keyName, "")
    end
    
    action GetHotkeySpan(text keyName, text className) returns text
        Span span
        span:SetClassAttribute("inline-block text-xs py-0.5 px-1 bg-neutral-white rounded")
        if className not= ""
            span:AddClassAttribute(className)
        end
        span:AddText(keyName)
        return span:Generate()
    end
    
    action AddScripts

        VersionHelper versions
Script editorScript
        editorScript:SetType("module")
        editorScript:SetAddress("/script/blockEditor.js" + versions:GetBlockEditorVersionQuery())
        Add(editorScript)
        
        Script hotkeyScript
        hotkeyScript:SetCode("
const elements = document.querySelectorAll('.OSSpecific');
const tabkeyNext = document.querySelectorAll('.tabkeyNext');
const tabkeyPrevious = document.querySelectorAll('.tabkeyPrevious');
let OSkey = 'UNKNOWN';
let macTabNextKey = ']';
let macTabPreviousKey = '[';
let userAgent = window.navigator.userAgent;

if (userAgent.indexOf('Win') != -1) {
  OSkey = 'ALT';
} else if (userAgent.indexOf('Mac') != -1) {
  OSkey = 'CTRL';
  let heading = document.getElementById('blockHotkeyTitle');
  heading.innerText = 'Hotkey Shortcuts (Mac)';
  tabkeyNext.forEach(keySpan => {
    keySpan.innerHTML = macTabNextKey;
  });
  tabkeyPrevious.forEach(keySpan => {
    keySpan.innerHTML = macTabPreviousKey;
  });
  
} else {
  OSkey = 'ALT';
}
elements.forEach(keySpan => {
  keySpan.innerHTML = OSkey;
});
")
        Add(hotkeyScript)
        
        Script canvasObserver
        canvasObserver:SetCode("
// observe the ui container for mutations
const observerUIContainer = document.getElementById('QuorumUIContainer');
const observerBlockContainer = document.getElementById('BlockUIContainer');
var observerFocused = false;
// check to see if canvas was added to the ui container
const callback = (mutationList) => {
  if(observerUIContainer.hasChildNodes()) {
    let list = observerUIContainer.getElementsByTagName('canvas');
    if (list.length != 0 && !observerFocused) {
      observerBlockContainer.display = 'none';
      observerBlockContainer.ariaHidden = 'true';
      let buttons = observerBlockContainer.getElementsByTagName('button');
      if(buttons.length > 0) buttons[0].tabIndex = 0;
      if (observerBlockContainer.contains(document.activeElement)) {
        observerUIContainer.getElementsByTagName('button')[0].focus();
        observerFocused = true;
      }
    }
  } else {
    observerBlockContainer.display = 'block';
    observerBlockContainer.ariaHidden = 'false';
    let buttons = observerBlockContainer.getElementsByTagName('button');
    if(buttons.length > 0) buttons[0].tabIndex = 0;
    observerFocused = false;
  }
};

const observer = new MutationObserver(callback);
observer.observe(observerUIContainer, {childList: true});
")
        Add(canvasObserver)
        
Script startEditorScript
        startEditorScript:SetCode("Module['onRuntimeInitialized'] = function() {
                    import('/script/blockEditor.js"+versions:GetBlockEditorVersionQuery()+"').then((BlockEditor) => {
window.BLOCK_EDITOR = BlockEditor;
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', function(){
    BlockEditor.Start();
    console.log('started editor');
});
} else {
  BlockEditor.Start();
  console.log('started editor');
} 
                });
        };")
        
currentPage:GetWebPageHeader():Add(startEditorScript)
    end
    
    action SetNoCanvasMode(boolean noCanvasMode)
        me:noCanvasMode = noCanvasMode
    end
    
action SetCodeForIDE(text codeForIDE)
        me:codeForIDE = codeForIDE
    end
    
    action SetPaletteFile(text paletteFile)
        me:paletteFile = paletteFile
    end

    action GetFillDivision returns boolean
        return fillDivision
    end

    action SetFillDivision(boolean fillDivision)
        me:fillDivision = fillDivision
    end
end