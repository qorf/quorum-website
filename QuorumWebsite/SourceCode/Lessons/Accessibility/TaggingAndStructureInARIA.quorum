use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image

class TaggingAndStructureInARIA is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    text lt = "&lt"
    Preformatter preformatter 

    action Setup
        LineBreak break 
        
        SetWebPageTitle("Tagging And Structure In ARIA - Quorum Programming Language")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2 ")
        AddHeading(headDiv, "Tagging And Structure In ARIA", 1)

        headDiv:AddParagraph("ARIA relies on a clear underlying structure, using roles and tags to communicate the organization and purpose of content to assistive technologies.")
        bodyDiv:Add(headDiv)

        bodyDiv:Add(AddOverview())
        bodyDiv:Add(AddWarmup())
        bodyDiv:Add(AddExplore())
        bodyDiv:Add(AddEngage())
        bodyDiv:Add(AddWrapup())

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action AddOverview returns Section
        Section sectionOverview
        sectionOverview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(sectionOverview, "Overview", 2)
        sectionOverview:AddParagraph("In this lesson, you will continue exploring the basics of the Accessible Rich Internet Applications (ARIA) standard, with a focus on how structure affects accessibility. Assistive technologies rely on well-structured content to support effective navigation and comprehension. Using appropriate tags and elements, such as headings, lists, landmarks, and tables, helps ensure your content is organized in a clear and meaningful way.")

        AddHeading(sectionOverview, "Goals", 3)
        sectionOverview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Understand how document structure supports accessibility")
        goalList:AddListItem("Learn how semantic HTML can convey meaning and relationships between elements")
        goalList:AddListItem("Identify common structural issues that affects screen reader or keyboard access")
        goalList:AddListItem("Compare the use of semantic HTML versus ARIA for conveying structure")
        sectionOverview:Add(goalList)
        return sectionOverview
    end
   
    action AddWarmup returns Section
        Section section
        section:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section, "Warm up", 2)
        section:AddParagraph("In previous lessons, you learned that structure plays a key role in how screen readers convey information. Now, consider this: if ARIA changes the meaning or role of elements on a page, how might that affect features like the Rotor on iOS tablets, Quick Nav on Mac desktops, or Browse Mode in NVDA? Think about how these navigation tools rely on meaningful structure, and what might happen if that structure is altered or unclear.")
        
        AddHeading(section, "Vocabulary", 3)
        section:AddParagraph("You will be learning about the following vocabulary words: ")
        WebTable vocabTable = LoadWebTable("Vocabulary", "/html/media/Accessibility/TaggingAndStructureInARIA/Vocabulary.csv")
        section:Add(vocabTable)

        AddHeading(section, "Web Content Accessibility Standards", 3)
        Paragraph cstaPara
        cstaPara:AddText("This lesson covers the following ")
        Link linkStandards = cstaPara:AddLink("standards", "https://www.w3.org/WAI/standards-guidelines/wcag/")
        cstaPara:AddText(":")
        linkStandards:SetTarget(linkStandards:newTab)
        section:Add(cstaPara)

        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("WCAG 2.2 - 1.1.1 Non-text Content")
        standards:AddListItem("WCAG 2.2 - 1.3.1 Info and Relationships")   
        standards:AddListItem("WCAG 2.2 - 2.1.1 Keyboard")
        standards:AddListItem("WCAG 2.2 - 4.1.2 Name, Role, Value")
        section:Add(standards)
        return section
    end
   
    action AddExplore returns Section
        Section section
        section:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section, "Explore", 2)
        section:AddParagraph("In the last lesson you were introduced to what an ARIA role is and a few types of roles you may encounter. Remember that ARIA roles describe what an element is and adds semantic meaning to it. There are two more categories of ARIA roles that can help manage accessibility. Document Structure roles convey structure and organization and Landmark roles identify high-level regions of a web page for navigation and orientation.")

        AddHeading(section, "Document Structure Roles", 3)
        section:AddParagraph("<strong>Document Structure roles</strong> give a description for a section of content. These roles are meant to show relationships and organization of content. Assistive technologies make use of these roles to give more information about the structural context of the elements. These roles might not add functionality, but they cover common usage patterns. For example, if an accessibility device comes across a toolbar, they might be familiar with toolbars and thus change the user interface, in any number of ways for any number of different kinds of people with any number of disabilities.")
        section:AddParagraph("Here are some of the Document Structure roles that have no native HTML equivalents:")
        WebTable noSemanticTable = LoadWebTable("Document Structure Roles without Semantic HTML Equivalents", "/html/media/Accessibility/TaggingAndStructureInARIA/StructureRolesNoHTML.csv")
        section:Add(noSemanticTable)
        section:AddParagraph("Modern HTML has a variety of tags that cover a lot of structure roles ARIA has to offer. The roles still exist and can be used but for the following roles there is an HTML equivalent that should be used instead:")
        WebTable semanticTable = LoadWebTable("Document Structure Roles With Semantic HTML Equivalents", "/html/media/Accessibility/TaggingAndStructureInARIA/StructureRolesHTML.csv")
        section:Add(semanticTable)

        AddHeading(section, "Headings", 4)
        section:AddParagraph("Headings provide a clear outline of content, allowing users to scan and understand the structure of a page. Screen readers often rely on heading levels (e.g., "+lt+"h1> through "+lt+"h6>) to generate an overview of the page and enable quick navigation. Proper heading hierarchy is essential, skipping levels or using headings purely for visual styling can disrupt accessibility.")
        AddHeading(section, "Lists", 4)
        section:AddParagraph("Lists group related items together, helping users interpret information more efficiently. Whether ordered ("+lt+"ol>) or unordered ("+lt+"ul>), lists communicate structure to assistive technologies and maintain consistency in content presentation. Avoid using visual spacing or symbols in place of semantic list elements to ensure content remains navigable and meaningful.")
        AddHeading(section, "Tables", 4) 
        section:AddParagraph("<strong>Tables</strong> are a visualization tool and used widely across the web. Because of this, screen readers give tables extra affordances that allow users to navigate them easier and read out relevant information about an individual cell. They are mentioned here because they require a small amount of care with tagging.")
        section:AddParagraph("The tags related to tables are examples of Document Structure roles that add meaning to cells by describing the relationships between cells and where they fit in the structure. Here is an example of a bad HTML table:")
        section:Add(preformatter:GeneratePreformattedCode(lt+"table>
  "+lt+"tr>
    "+lt+"td>Product"+lt+"/td>
    "+lt+"td>Price"+lt+"/td>
    "+lt+"td>In Stock"+lt+"/td>
  "+lt+"/tr>
  "+lt+"tr>
    "+lt+"td>Laptop"+lt+"/td>
    "+lt+"td>$999"+lt+"/td>
    "+lt+"td>Yes"+lt+"/td>
  "+lt+"/tr>
  "+lt+"tr>
    "+lt+"td>Monitor"+lt+"/td>
    "+lt+"td>$199"+lt+"/td>
    "+lt+"td>No"+lt+"/td>
  "+lt+"/tr>
"+lt+"/table>"))
        section:AddParagraph("If rendered in the browser, although it might look fine visually with this structure, these tags could negatively impact the experience of a user that is using a page's hidden structure. It is common for the first row of a table to be the header cells that describe the cells below them. For a screen reader to provide this additional information to a user, the table needs to be marked up correctly. Here is an example of a correctly formatted HTML table:")
        section:Add(preformatter:GeneratePreformattedCode(lt+"table>
  "+lt+"thead>
    "+lt+"tr>
      "+lt+"th scope='col'>Product"+lt+"/th>
      "+lt+"th scope='col'>Price"+lt+"/th>
      "+lt+"th scope='col'>In Stock"+lt+"/th>
    "+lt+"/tr>
  "+lt+"/thead>
  "+lt+"tbody>
    "+lt+"tr>
      "+lt+"td>Laptop"+lt+"/td>
      "+lt+"td>$999"+lt+"/td>
      "+lt+"td>Yes"+lt+"/td>
    "+lt+"/tr>
    "+lt+"tr>
      "+lt+"td>Monitor"+lt+"/td>
      "+lt+"td>$199"+lt+"/td>
      "+lt+"td>No"+lt+"/td>
    "+lt+"/tr>
  "+lt+"/tbody>
"+lt+"/table>"))
        section:AddParagraph("Now this table has a proper header section with "+lt+"th> elements that also describe how they are headers for a column and not a row. And now the body and header section are properly sectioned. The cells and rows now have a specified relationship. For example the properly formatted table could be read row by row by a screen reader like ‘Product: Laptop, Price: $99, In Stock: Yes.’ As a reminder, many types of accessibility tools use structure, but the choice becomes aurally obvious in a screen reader.")
        section:AddParagraph("For tables, the native HTML elements cover enough that you should not need to use the associated ARIA roles to make a native HTML table fully accessible. Here are some of the elements you can use:")
        WebTable tablehtmlTable = LoadWebTable("HTML Table Elements", "/html/media/Accessibility/TaggingAndStructureInARIA/TableHTML.csv")
        section:Add(tablehtmlTable)

        AddHeading(section, "Landmark Roles", 3)
        section:AddParagraph("<strong>Landmark roles</strong> are less fine grained than Document Structure roles. These roles identify a high-level region of a web page. Landmarks allow screen reader users to jump quickly to major parts of a page. A lot of these regions typically only show up once per page and these semantic regions then get exposed in the accessibility tree. The <strong>accessibility tree</strong>, typically stored in the computer's operating system, is a location where all accessibility devices gather information from. How it works is complex and varies in its implementation. For web developers, it is kind of similar to working in the DOM, but usually much more low level and with roles that are mapped at the operating system level and generally less the web level.")
        WebTable landmarkTable = LoadWebTable("Landmark Roles With Semantic HTML Equivalents", "/html/media/Accessibility/TaggingAndStructureInARIA/LandmarkRolesHTML.csv")
        section:Add(landmarkTable)
        section:AddParagraph("When using landmark roles, it is important to apply them correctly to maintain clarity and consistency for assistive technology users. Remember that roles like main and banner should appear only once per page to prevent confusion, while others like navigation can appear multiple times as long as they are clearly distinguished. To help users differentiate between similar landmarks, especially when there are multiples of the same type, you can use attributes like aria-label or aria-labelledby to give each region a unique, descriptive name. For example, labeling different navigation areas as ‘Main Menu’ and ‘Footer Links.’ This ensures screen reader users can easily understand the purpose of each section and move between them efficiently.")

        AddHeading(section, "Main", 4)
        section:AddParagraph("A common landmark is main ("+lt+"main>), and it identifies the primary content of a page, excluding headers, footers, and sidebars. This allows users to bypass repetitive content and focus directly on the core material. <strong>There should be only one main region per page</strong> to maintain clarity and avoid confusion.") 

        AddHeading(section, "Navigation", 4)
        section:AddParagraph("Another common landmark role is navigation (typically implemented as "+lt+"nav>), it identifies a section of the page containing links to other areas or pages. This helps users quickly locate site menus or other navigational aids using screen reader region shortcuts or rotor features. Each page can have multiple navigation landmarks, but they should be clearly labeled to differentiate them.")       

        AddHeading(section, "Widget Roles", 3)
        section:AddParagraph("As a reminder from the previous lesson, widget roles describe interactive components like buttons, sliders, and dialogs. These roles provide essential information about how users can interact with elements. They are especially important when native HTML elements are not used or when behavior extends beyond standard controls.")
            
        AddHeading(section, "Application", 4)
        section:AddParagraph("It might be the case that you have created a web experience that is more like a desktop application than a normal web page. There could be a number of interactions and commands where navigating by headers or jumping to landmarks does not work with this application and would be harder for screen reader users to use. That is where the ARIA widget role application comes into play. This role is essential, dangerous, confusing, messy, confusing, inconsistent, and so many other things. To say the least, while it does have use and it is good to know about it, try to avoid using it unless you absolutely know what you are doing. Also, be aware that no matter how you use it, others will likely tell you that you are doing it wrong.")
        section:AddParagraph("The <strong>application role</strong> signals to a screen reader that a region of the page should be treated differently and to not provide traditional screen reader affordances. This gives developers finer control over keyboard interactions and focus management in that region. Or at least all of that is true in theory. In practice, it never really works out and again considerable caution and ample testing is necessary if you believe you need this role.")
        section:AddParagraph("There also exists the aria-roledescription attribute which can be added to custom widgets to change how a screen reader expresses the name of that role. Take this code example:")
        section:Add(preformatter:GeneratePreformattedCode(lt+"div role='application' aria-roledescription='Block' aria-label='My Component'>
    My Component
"+lt+"/div>
"))
        section:AddParagraph("Without the role description a screen reader would vocalize this as ‘application, My Component’. The word application does not really give the user much information. The role description gives you a way to override the name to something you as a developer would find more helpful. For this example it could be read as ‘Block, My Component’ and in the context of your own application could be more useful for the screen reader experience.")
        section:AddParagraph("Because encountering an element with role='application' can be disruptive to the screen reader experience, it is a role to be used <i>cautiously</i>. Screen readers lose what is known as the <strong>virtual cursor</strong> and non-interactive elements like images or paragraphs cannot be reached. Certain shortcut keys screen readers add to navigate web pages stop working so those keys are opened up to be used by your application. Because of this, unfortunately results you get using this role may vary.")
        section:AddParagraph("An incorrectly applied or misused role='application' could be detrimental for the usability of a site for a screen reader user. So the implementation and result can vary between system and assistive technology. For example, on mobile devices, the major screen readers Talkback and VoiceOver tend to ignore the role and operate as if it was not there. As such, it is important to test on various platforms when attempting to use this role. Even though the role might not always work as expected, sometimes it is useful to try to get a screen reader to relinquish control and let the developers try to make a more accessible experience than might have not otherwise been possible. Put simply, the platforms can sometimes be a real hindrance to accessibility, even with good intentions, and thus the application role is an optional tool to use in these cases.")

        //AddHeading(section, "Citations", 3)
        OrderedList citations
        citations:AddClassAttribute("list-decimal list-outside pl-8")
//        citations:AddListItem("")
        //section:Add(citations)

        return section
    end
   
    action AddEngage returns Section
        Section section
        section:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section, "Engage", 2)
        section:AddParagraph("Visual layouts can mislead you into thinking that assistive technologies can agree on its structure. For this activity you will be given a broken table that with the right styling might look fine but is missing all of the semantic structure. Your goal is to fix it.")

        AddHeading(section, "Directions", 3)
        section:AddParagraph("Below are some tables that might resemble a grid of data. It has no structure and only uses one type of element. Your job is to turn this into a screen reader friendly table using either the native HTML tags and ARIA properties as you see fit. For each table, do the following:")
        UnorderedList tableList
        tableList:AddClassAttribute("list-disc list-outside pl-8")
        tableList:AddListItem("Imagine what it would say in your head as navigating")
        tableList:AddListItem("Actually traverse the table with various technologies and check")   
        tableList:AddListItem("Fix the table and recheck")
        section:Add(tableList)
        Paragraph w3Para
        w3Para:AddText("To do this, you can either copy paste the HTML into an HTML file and open it in a browser or copy the code and use an online HTML editor like ")
        Link linkW3 = w3Para:AddLink("W3Schools TryIt Editor", "https://www.w3schools.com/html/tryit.asp?filename=tryhtml_default")
        linkW3:SetTarget(linkW3:newTab)
        w3Para:AddText(".")
        section:Add(w3Para)
        section:AddParagraph("First, take the following table code:")
        section:Add(preformatter:GeneratePreformattedCode(lt+"div class='table'>
  "+lt+"div class='caption'>Users"+lt+"/div>
  "+lt+"div class='row'>
    "+lt+"div class='cell'>Name"+lt+"/div>
    "+lt+"div class='cell'>Email"+lt+"/div>
    "+lt+"div class='cell'>Status"+lt+"/div>
  "+lt+"/div>
  "+lt+"div class='row'>
    "+lt+"div class='cell'>Jane Doe"+lt+"/div>
    "+lt+"div class='cell'>jane@example.com"+lt+"/div>
    "+lt+"div class='cell'>Active"+lt+"/div>
  "+lt+"/div>
  "+lt+"div class='row'>
    "+lt+"div class='cell'>John Smith"+lt+"/div>
    "+lt+"div class='cell'>john@example.com"+lt+"/div>
    "+lt+"div class='cell'>Inactive"+lt+"/div>
  "+lt+"/div>
"+lt+"/div>
"))
        section:AddParagraph("As part of your fixes, ensure that the header cells are tagged appropriately and that each cell is properly associated with its header. Once you have finished fixing the first table, try to correct the next table. Remember that cells are sometimes associated with more than one header:")
        section:Add(preformatter:GeneratePreformattedCode(lt+"div class='table'>
  "+lt+"div class='caption'>Sales info"+lt+"/div>
  "+lt+"div class='row header'>
    "+lt+"div class='cell'>"+lt+"/div>
    "+lt+"div class='cell'>Monday"+lt+"/div>
    "+lt+"div class='cell'>Tuesday"+lt+"/div>
    "+lt+"div class='cell'>Wednesday"+lt+"/div>
  "+lt+"/div>
  "+lt+"div class='row'>
    "+lt+"div class='cell'>North"+lt+"/div>
    "+lt+"div class='cell'>$1,200"+lt+"/div>
    "+lt+"div class='cell'>$1,450"+lt+"/div>
    "+lt+"div class='cell'>$1,300"+lt+"/div>
  "+lt+"/div>
  "+lt+"div class='row'>
    "+lt+"div class='cell'>South"+lt+"/div>
    "+lt+"div class='cell'>$980"+lt+"/div>
    "+lt+"div class='cell'>$1,100"+lt+"/div>
    "+lt+"div class='cell'>$1,050"+lt+"/div>
  "+lt+"/div>
  "+lt+"div class='row'>
    "+lt+"div class='cell'>East"+lt+"/div>
    "+lt+"div class='cell'>$1,500"+lt+"/div>
    "+lt+"div class='cell'>$1,600"+lt+"/div>
    "+lt+"div class='cell'>$1,550"+lt+"/div>
  "+lt+"/div>
"+lt+"/div>
"))

        return section
    end
   
    action AddWrapup returns Section
        Section section
        AddHeading(section, "Wrap up", 2)
        section:AddParagraph("ARIA is a powerful enhancement to HTML that helps make non-semantic elements more accessible. In this lesson, you explored how meaningful structure, using elements like headings, lists, landmarks, and roles, supports a more navigable and understandable experience for users of assistive technologies. As you build and review your own content, consider how your page structure guides users. Are you relying on ARIA where native HTML would be better, or overlooking places where ARIA could improve clarity and access? Thoughtful use of both structure and ARIA ensures a more inclusive web experience.")
        return section
    end
    
    
    action GetMetaDescription returns text
        return "Learn the underlying structure in ARIA to communicate the organization and purpose of content to assistive technologies"
    end

    action GetSummaryName returns text
        return "Learn the underlying structure in ARIA to communicate the organization and purpose of content to assistive technologies"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Tagging And Structure In ARIA"
    end

    action GetShortDescription returns text
        return "the underlying structure in ARIA to communicate the organization and purpose of content to assistive technologies"
    end

    action GetLinkName returns text
        return "Tagging And Structure In ARIA"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/accessibility/taggingandstructureinARIA.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Technical Accessibility"
    end
end

