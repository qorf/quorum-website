use Libraries.Web.Page.Division
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.Image
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableBody
use Libraries.Containers.Array
use Libraries.Web.Page.TableHeader
use Libraries.Web.Page.Form
use Libraries.Web.Page.Label
use Libraries.Web.Page.Bold
use Libraries.Web.Page.Input
use Libraries.Web.Page.Span
use Libraries.Web.Page.Button
use Libraries.Web.Page.Script
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Select
use Libraries.Web.Page.Option


class HoCDataScience4 is HourOfCodeDataScience
    integer ACTIVITY = 4
    text SUBTITLE = "Separating into Sub-Charts"

    action Setup()
// set values for the block ide on this page
        SetPaletteFileName("quorum/palette/dataScience4.xml")
        SetCodeForBlocks("html/hourofcode/datascience/datascience4.quorum")
        Setup(ACTIVITY, SUBTITLE, GetIntro(), GetInstructions(), GetBlockIDE(), GetQuestions())
    end

    action GetIntro() returns Division
        text dq = ""
        dq = dq:GetDoubleQuote()
        Division intro
        Preformatter pre

        // tracking pixel for code.org
        //intro:AddImage("https://code.org/api/hour/begin_quorum_astronomy.png", "")
        intro:AddParagraph("")
        intro:AddParagraph("In Activity 3, we made a chart separating our penguins into three groups based on their species. The chart we made had a cluster of data points for each species that didn't overlap, so it was pretty easy to 
see all the points in each group. Sometimes, the data can look pretty messy when we plot it. For example, if you run the program below, we are separating the penguins into three groups based on the island they live on. You'll notice that we can kind of 
tell where the Biscoe and Dream groups are on the plot, but the Torgersen group is overlapped and hard to examine. In this case, it can be very useful to split our groups of data into their own Sub-Charts.")
        intro:AddParagraph("")
        
        WebTable table = AddWebTable("Sample of Penguins2.CSV file")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("species") 
        tableHeaderArray:Add("island")
        tableHeaderArray:Add("bill_depth")
        tableHeaderArray:Add("bill_length") 
        tableHeaderArray:Add("flipper_length")

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> penguinData1
        penguinData1:Add("Adelie")
        penguinData1:Add("Torgersen")
        penguinData1:Add("18.7") 
        penguinData1:Add("39.1") 
        penguinData1:Add("181")
        tableBody:Add(AddTableBodyRow(penguinData1))

        Array<text> penguinData2
        penguinData2:Add("Adelie")
        penguinData2:Add("Biscoe") 
        penguinData2:Add("18.3") 
        penguinData2:Add("37.8") 
        penguinData2:Add("174")
        tableBody:Add(AddTableBodyRow(penguinData2))

        Array<text> penguinData3
        penguinData3:Add("Adelie")
        penguinData3:Add("Dream") 
        penguinData3:Add("18.5") 
        penguinData3:Add("36.8") 
        penguinData3:Add("193")
        tableBody:Add(AddTableBodyRow(penguinData3))

        Array<text> penguinData4
        penguinData4:Add("Gentoo")
        penguinData4:Add("Biscoe") 
        penguinData4:Add("13.2") 
        penguinData4:Add("46.1") 
        penguinData4:Add("211")
        tableBody:Add(AddTableBodyRow(penguinData4))

        Array<text> penguinData5
        penguinData5:Add("Chinstrap")
        penguinData5:Add("Dream") 
        penguinData5:Add("17.9") 
        penguinData5:Add("46.5") 
        penguinData5:Add("192")
        tableBody:Add(AddTableBodyRow(penguinData5))
    
        table:Add(tableBody)
        intro:Add(table)

        return intro

    end

    action GetInstructions() returns Division
        Division instructions
        
        instructions:AddParagraph("")
        instructions:AddParagraph("In the code editor below, we have a program that makes a Chart looking at Bill Depth vs Bill Length divided into groups based on Island. Take code blocks from the palette and place them below where we make the Chart object and before we Display the chart.")
        OrderedList instructionsList
        instructionsList:AddListItem("<b>Before adding anything, try running the program and inspect the Chart.</b>")
        instructionsList:AddListItem("<b>Stop the program.</b>")
        instructionsList:AddListItem("<b>Use the block(s) in the palette on the left.</b>")
        instructionsList:AddListItem("<b>Place the 'chart:SeparateByFactor()' block below the 'ScatterPlot chart = frame:ScatterPlot()' block in the block editor.</b>")
        instructionsList:AddListItem("<b>Run the program.</b>")
        instructionsList:AddListItem("<b>Use the chart in the canvas to answer the questions in the Activity section.</b>")
        instructionsList:AddClassAttribute("list-decimal list-outside pl-8")
        instructions:Add(instructionsList)  
        instructions:AddParagraph("")

        return instructions
    end

    action GetQuestions() returns Division
        Division questions

        AddStylesheet("/style/checkAnswers.css")
        AddScript("/script/logging.js")
        

        questions:AddParagraph("")
        questions:AddParagraph("Use the chart(s) you've created in the Coding section to answer a few questions.")
        questions:AddParagraph("")
        
        Division hiddenStyling
        hiddenStyling:AddClassAttribute("hidden text-green-600 text-red-600 border-green-500 border-red-500")
        questions:Add(hiddenStyling)

        Form questionForm
        questionForm:SetIdentifier("quiz-form")
        questions:Add(questionForm)
        
        
        Division question1
        question1:AddClassAttribute("mb-4")
        questionForm:Add(question1)

        Paragraph question1Paragraph
        question1Paragraph:SetIdentifier("q1-label")
        question1Paragraph:AddClassAttribute("text-lg font-semibold text-gray-700")
        question1Paragraph:AddText("1. What's the largest bill length for the Torgersen group?")
        question1:Add(question1Paragraph)

        Paragraph question1Validation
        question1Validation:SetIdentifier("q1-validation")
        question1Validation:AddAttribute("aria-live","polite")
        question1Validation:AddClassAttribute("text-sm mt-1")
        question1:Add(question1Validation)

        Select question1Select
        question1Select:SetIdentifier("q1")
        question1Select:AddAttribute("aria-labelledby","q1-label")
        question1Select:AddAttribute("aria-describedby","q1-validation")
        question1Select:AddClassAttribute("mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-500 focus:border-blue-500 p-2 
                       data-[state=incorrect]:border-red-500 data-[state=incorrect]:focus:ring-red-500 data-[state=incorrect]:focus:border-red-500 
                       data-[state=correct]:border-green-500 data-[state=correct]:focus:ring-green-500 data-[state=correct]:focus:border-green-500")
        question1:Add(question1Select)

        Option question1Option1
        question1Option1:AddAttribute("value","")
        question1Option1:SetSelected(true)
        question1Option1:SetDisabled(true)
        question1Option1:AddText("Choose an option")
        question1Select:Add(question1Option1)

        Option question1Option2
        question1Option2:AddAttribute("value","21.5")
        question1Option2:AddText("21.5")
        question1Select:Add(question1Option2)

        Option question1Option3
        question1Option3:AddAttribute("value","46")
        question1Option3:AddText("46")
        question1Select:Add(question1Option3)

        Option question1Option4
        question1Option4:AddAttribute("value","51.3")
        question1Option4:AddText("51.3")
        question1Select:Add(question1Option4)

        Option question1Option5
        question1Option5:AddAttribute("value","59.6")
        question1Option5:AddText("59.6")
        question1Select:Add(question1Option5)



        //Question 2
        Division question2
        question2:AddClassAttribute("mb-4")
        questionForm:Add(question2)

        Paragraph question2Paragraph
        question2Paragraph:SetIdentifier("q2-label")
        question2Paragraph:AddClassAttribute("text-lg font-semibold text-gray-700")
        question2Paragraph:AddText("2. What's the smallest bill depth for the Torgersen group?")
        question2:Add(question2Paragraph)

        Paragraph question2Validation
        question2Validation:SetIdentifier("q2-validation")
        question2Validation:AddAttribute("aria-live","polite")
        question2Validation:AddClassAttribute("text-sm mt-1")
        question2:Add(question2Validation)

        Select question2Select
        question2Select:SetIdentifier("q2")
        question2Select:AddAttribute("aria-labelledby","q2-label")
        question2Select:AddAttribute("aria-describedby","q2-validation")
        question2Select:AddClassAttribute("mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-500 focus:border-blue-500 p-2 
                       data-[state=incorrect]:border-red-500 data-[state=incorrect]:focus:ring-red-500 data-[state=incorrect]:focus:border-red-500 
                       data-[state=correct]:border-green-500 data-[state=correct]:focus:ring-green-500 data-[state=correct]:focus:border-green-500")
        question2:Add(question2Select)

        Option question2Option1
        question2Option1:AddAttribute("value","")
        question2Option1:SetSelected(true)
        question2Option1:SetDisabled(true)
        question2Option1:AddText("Choose an option")
        question2Select:Add(question2Option1)

        Option question2Option2
        question2Option2:AddAttribute("value","15.4")
        question2Option2:AddText("15.4")
        question2Select:Add(question2Option2)

        Option question2Option3
        question2Option3:AddAttribute("value","15.9")
        question2Option3:AddText("15.9")
        question2Select:Add(question2Option3)

        Option question2Option4
        question2Option4:AddAttribute("value","16.6")
        question2Option4:AddText("16.6")
        question2Select:Add(question2Option4)

        Option question2Option5
        question2Option5:AddAttribute("value","21.5")
        question2Option5:AddText("21.5")
        question2Select:Add(question2Option5)
        
        Button questionFormButton
        questionFormButton:SetType("button")
        questionFormButton:SetOnClick("checkAnswers(true)")
        questionFormButton:AddClassAttribute("py-2 px-10 w-fit bg-quorum-blue-100 ml-4 font-bold captitalize rounded-2xl")
        questionFormButton:AddText("Check Answers")
        questionForm:Add(questionFormButton)

        Division resultsArea
        resultsArea:AddAttribute("role","region")
        resultsArea:AddAttribute("aria-live","polite")
        resultsArea:SetIdentifier("result")
        resultsArea:AddClassAttribute("mt-4 text-lg font-semibold")
        questionForm:Add(resultsArea)
        
        Script checkAnswersScript
        checkAnswersScript:AddText("
            
            document.addEventListener('DOMContentLoaded', function() {
                loadSavedAnswers(); // Load saved answers on page load
            });
    
            function saveAnswer(question, value) {
                sessionStorage.setItem(question, value);
            }
    
            function loadSavedAnswers() {
                // Load dropdown selection
                let savedAnswers = 0
                let savedQ1 = sessionStorage.getItem('l4q1');
                if (savedQ1) {
                    document.getElementById('q1').value = savedQ1;
                    savedAnswers++;
                }
    
                // Load dropdown selection
                let savedQ2 = sessionStorage.getItem('l4q2');
                if (savedQ2) {
                    document.getElementById('q2').value = savedQ2;
                    savedAnswers++;
                }
                if (savedAnswers > 0)
                    checkAnswers(true);
            }

            // Attach event listeners to save selections
            document.getElementById('q1').addEventListener('change', function () {
                saveAnswer('l4q1', this.value);
                document.getElementById('q1').removeAttribute('data-state');
                document.getElementById('q1').removeAttribute('aria-invalid');
                document.getElementById('q1-validation').innerText = '';
                document.getElementById('q1-validation').classList.remove('text-green-600', 'text-red-600');
            });
            
            document.getElementById('q2').addEventListener('change', function () {
                saveAnswer('l4q2', this.value);
                document.getElementById('q2').removeAttribute('data-state');
                document.getElementById('q2').removeAttribute('aria-invalid');
                document.getElementById('q2-validation').innerText = '';
                document.getElementById('q2-validation').classList.remove('text-green-600', 'text-red-600');
            });

            function checkAnswers(logging) {
                let score = 0;
    
                // Correct answers
                const correctAnswers = {
                    q1: '46',
                    q2: '15.9'
                };
            
                // Extract activity number from the URL
                const activityNumber = extractActivityNumberFromURL();
                
                // Array to store question results
                const questionsData = [];
           
                //Reset state before checking answers (generic for all questions)
                document.querySelectorAll('select').forEach(select => {
                    select.removeAttribute('data-state');
                    select.removeAttribute('aria-invalid');
                });
            
                document.querySelectorAll(`[id$='-validation']`).forEach(validationElement => {
                    validationElement.innerText = '';
                    validationElement.classList.remove('text-green-600', 'text-red-600');
                });
            
                //Loop through each question dynamically
                Object.keys(correctAnswers).forEach((questionId) => {
                    let selectedAnswer = document.querySelector(`#${questionId}`).value;
                    let questionLabelElement = document.querySelector(`#${questionId}-label`);
                    let questionText = questionLabelElement ? questionLabelElement.innerText.trim() : `Unknown Question (${questionId})`;
                    let correctAnswer = correctAnswers[questionId];
                    let isCorrect = selectedAnswer === correctAnswer;
            
                    if (selectedAnswer) {
                        if (isCorrect) {
                            score++;
                            document.getElementById(questionId).setAttribute('data-state', 'correct');
                            document.getElementById(`${questionId}-validation`).innerText = 'Correct';
                            document.getElementById(`${questionId}-validation`).classList.add('text-green-600');
                        } else {
                            document.getElementById(questionId).setAttribute('data-state', 'incorrect');
                            document.getElementById(questionId).setAttribute('aria-invalid', 'true');
                            document.getElementById(`${questionId}-validation`).innerText = 'Incorrect';
                            document.getElementById(`${questionId}-validation`).classList.add('text-red-600');
                        }
            
                        // Store question result
                        questionsData.push({
                            question_id: questionId,
                            question: questionText,
                            user_response: selectedAnswer,
                            correct_answer: correctAnswer,
                            result: isCorrect ? 'correct' : 'incorrect'
                        });
                    }
                });
            
                // Display score and feedback
                let resultDiv = document.getElementById('result');
                let totalQuestions = Object.keys(correctAnswers).length;
                if (score === totalQuestions) {
                    resultDiv.innerHTML = `<p class='text-green-600'>You got everything correct.</p>`;
                } else {
                    resultDiv.innerHTML = `<p class='text-red-600'>You got ${score} out of ${totalQuestions} correct. Please try again!</p>`;
                }
            
                //If logging is enabled, log the event
                if (logging) {
                    logEvent('check_answers', {
                        activity_number: activityNumber,
                        total_correct: score,
                        total_questions: totalQuestions,
                        questions: questionsData
                    });
                }
            }
            
            //Function to extract the activity number from the URL
            function extractActivityNumberFromURL() {
                const urlParts = window.location.pathname.split('/'); // Split URL path
                const lastPart = urlParts[urlParts.length - 1]; // Get last section (e.g., 'datascience1.html')
                const match = lastPart.match(/\d+/); // Extract numeric part
                return match ? match[0] : 'N/A'; // Return number or 'N/A' if not found
            }
        ")
        questions:Add(checkAnswersScript)

        return questions
    end

//    action GetIDE() returns IDE
//        CodeForIDE code
//        code:AddFileUrl("Main.quorum", "html/hourofcode/datascience/datascience6.quorum")
//        IDE ide = AddIDE()
//        ide:SetLightTheme()
//        ide:SetCodeForIDE(code:GetJsonArray())
//        ide:SetIdeTitle("Type your code below...")
//        
//        return ide
//    end

    action GetLocation returns text
        return "hourofcode/datascience" + ACTIVITY + ".html"
    end

    action GetDocrootLocation returns text
        return "quorum/hourofcode/datascience" + ACTIVITY + ".html"
    end

    action GetLinkName returns text
        return  SUBTITLE
    end

    action GetSectionName returns text
        return "Data Science"
    end

    action GetName returns text
        return SUBTITLE
    end

    action GetShortDescription returns text
        return "how to separate the Chart into several Sub-Charts."
    end
end
